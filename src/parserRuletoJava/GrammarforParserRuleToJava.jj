/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserRuleToJava)package parserRuletoJava;import java.util.ArrayList;import datalog.Predicate;import datalog.Rule;import datalog.Condition;import datalog.RuleBody;public class ParserRuleToJava{}PARSER_END(ParserRuleToJava)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Zeichen */{
  < nullValue : "null" >|  < variable :    "?" < kindValue > (< number >)?    (      "~"      (        < number >      | < string >      )    )? >| < string : "'" (~[ "'" ])* "'" >| < operators :    "<"  | ">"  | "!"  | "=" >| < number :    (< digit >)+    (      "." (< digit >)+    )? >| < digit : [ "0"-"9" ] >| < not : "not" >| < kindValue : < nameValue > (< nameValue >)* >| < nameValue :    [ "a"-"z" ]  | [ "A"-"Z" ]  | "-"  | "_" >}ArrayList < Rule > start() :{  ArrayList < Rule > querys = new ArrayList < Rule > ();  RuleBody p = null;  Predicate leftRelation = null;  Rule q = null;}{  (    leftRelation = getRelation() ":-" p = getRelationList()    {      q = new Rule(leftRelation, p);      querys.add(q);    }    "."    (      (        leftRelation = getRelation() ":-" p = getRelationList()        {          q = new Rule(leftRelation, p);          querys.add(q);        }        "."      )    )*  )?  < EOF >  {    return querys;  }}ArrayList < Rule > parseHeadRules() :{  ArrayList < Rule > querys = new ArrayList < Rule > ();  RuleBody p = null;  Predicate leftRelation = null;  Rule q = null;}{  (    leftRelation = getRelation() ":-" p = getRelationList()    {      leftRelation.setHead(true);      q = new Rule(leftRelation, p);      querys.add(q);    }    "."    (      (        leftRelation = getRelation() ":-" p = getRelationList()        {          leftRelation.setHead(true);          q = new Rule(leftRelation, p);          querys.add(q);        }        "."      )    )*  )?  < EOF >  {    return querys;  }}RuleBody getRelationList() :{  ArrayList < Predicate > values = new ArrayList < Predicate > ();  ArrayList < Condition > conditions = new ArrayList < Condition > ();  Predicate predicate = null;  Condition condition = null;}{  (    (      (        predicate = getRelation()        {          values.add(predicate);        }      )    |      (        condition = getCondition()        {          conditions.add(condition);        }      )    )    (      ","      (        (          predicate = getRelation()          {            values.add(predicate);          }        )      |        (          condition = getCondition()          {            conditions.add(condition);          }        )      )    )*  )?  {    return new RuleBody(values, conditions);  }}Predicate getRelation() :{  Token kind = null;  Token schemaToken = null;  String value = null;  String attribute = null;  ArrayList < String > scheme = null;  Predicate predicate = null;  ArrayList < String > schema = null;  boolean isNot = false;  boolean schemaExists = true;  boolean isHead = false;}{  {    scheme = new ArrayList < String > ();    int pos = 0;  }  ("*"  {    isHead = true;  }  )?   (< not >  {    isNot = true;  }  )? (kind = < kindValue >) (schemaToken = < number >)?    "("  (    value = getValue()    {      scheme.add(value);    }    (      ","      (        value = getValue()        {          scheme.add(value);        }      )    )*  )?  ")"  {    predicate = new Predicate(kind.toString() + schemaToken.toString(), scheme.size(), scheme);    if (isNot) predicate.setNot(true);    predicate.setHead(isHead);    return predicate;  }}Condition getCondition() :{  String right = null;  String left = null;  Token operator = null;}{  left = getValue() operator = < operators > right = getValue()  {    Condition con = new Condition(left, right, operator.toString());    return con;  }}String getValue() :{  Token valueOfToken = null;}{  (    valueOfToken = < variable >  | valueOfToken = < number >  | valueOfToken = < string >
  | valueOfToken = < nullValue >  )  {    return valueOfToken.toString();  }}